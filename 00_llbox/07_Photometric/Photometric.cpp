#include "Photometric.h"
#include <math.h>

#define ACCURACY	0.000001f

const unsigned short LutMiredToX[] = {
	18362, 18400, 18437, 18474, 18512, 18550, 18588, 18626, 18665, 18703, 18742, 18781,
	18820, 18859, 18898, 18938, 18978, 19017, 19057, 19097, 19138, 19178, 19218, 19259,
	19300, 19341, 19382, 19423, 19465, 19506, 19548, 19589, 19631, 19673, 19715, 19758,
	19800, 19843, 19885, 19928, 19971, 20014, 20057, 20100, 20143, 20187, 20230, 20274,
	20318, 20362, 20405, 20450, 20494, 20538, 20582, 20627, 20671, 20716, 20761, 20805,
	20850, 20895, 20940, 20986, 21031, 21076, 21122, 21167, 21213, 21258, 21304, 21350,
	21396, 21442, 21488, 21534, 21580, 21626, 21672, 21718, 21765, 21811, 21858, 21904,
	21951, 21998, 22044, 22091, 22138, 22185, 22232, 22278, 22325, 22372, 22420, 22467,
	22514, 22561, 22608, 22655, 22703, 22750, 22797, 22845, 22892, 22940, 22987, 23034,
	23082, 23129, 23177, 23225, 23272, 23320, 23367, 23415, 23463, 23510, 23558, 23605,
	23653, 23701, 23748, 23796, 23844, 23891, 23939, 23987, 24035, 24082, 24130, 24178,
	24225, 24273, 24321, 24368, 24416, 24463, 24511, 24559, 24606, 24654, 24701, 24749,
	24796, 24844, 24891, 24939, 24986, 25034, 25081, 25128, 25176, 25223, 25270, 25317,
	25365, 25412, 25459, 25506, 25553, 25600, 25647, 25694, 25741, 25788, 25835, 25882,
	25928, 25975, 26022, 26069, 26115, 26162, 26208, 26255, 26301, 26347, 26394, 26440,
	26486, 26532, 26579, 26625, 26671, 26717, 26762, 26808, 26854, 26900, 26946, 26991,
	27037, 27082, 27128, 27173, 27218, 27264, 27309, 27354, 27399, 27444, 27489, 27534,
	27579, 27623, 27668, 27713, 27757, 27802, 27846, 27890, 27935, 27979, 28023, 28067,
	28111, 28155, 28199, 28242, 28286, 28330, 28373, 28417, 28460, 28503, 28547, 28590,
	28633, 28676, 28719, 28761, 28804, 28847, 28890, 28932, 28974, 29017, 29059, 29101,
	29143, 29185, 29227, 29269, 29311, 29353, 29394, 29436, 29477, 29519, 29560, 29601,
	29642, 29683, 29724, 29765, 29806, 29846, 29887, 29927, 29968, 30008, 30048, 30088,
	30128, 30168, 30208, 30248, 30288, 30327, 30367, 30406, 30446, 30485, 30524, 30563,
	30602, 30641, 30680, 30718, 30757, 30796, 30834, 30872, 30911, 30949, 30987, 31025,
	31063, 31101, 31138, 31176, 31213, 31251, 31288, 31325, 31363, 31400, 31437, 31473,
	31510, 31547, 31583, 31620, 31656, 31693, 31729, 31765, 31801, 31837, 31873, 31909,
	31944, 31980, 32016, 32051, 32086, 32121, 32157, 32192, 32227, 32261, 32296, 32331,
	32365, 32400, 32434, 32469, 32503, 32537, 32571, 32605, 32639, 32673, 32706, 32740,
	32773, 32807, 32840, 32873, 32906, 32939, 32972, 33005, 33038, 33071, 33103, 33136,
	33168, 33200, 33233, 33265, 33297, 33329, 33361, 33392, 33424, 33456, 33487, 33519,
	33550, 33581, 33613, 33644, 33675, 33706, 33736, 33767, 33798, 33828, 33859, 33889,
	33919, 33950, 33980, 34010, 34040, 34070, 34100, 34129, 34159, 34188, 34218, 34247,
	34277, 34306, 34335, 34364, 34393, 34422, 34451, 34479, 34508, 34536, 34565, 34593,
	34622, 34650, 34678, 34706, 34734 };


const unsigned short LutMiredToY[] = {
	19041, 19082, 19123, 19165, 19206, 19247, 19288, 19330, 19371, 19413, 19454, 19496,
	19537, 19579, 19620, 19662, 19703, 19745, 19787, 19828, 19870, 19912, 19953, 19995,
	20037, 20078, 20120, 20162, 20203, 20245, 20287, 20328, 20370, 20411, 20453, 20494,
	20536, 20577, 20619, 20660, 20701, 20743, 20784, 20825, 20866, 20907, 20948, 20989,
	21030, 21071, 21112, 21153, 21193, 21234, 21275, 21315, 21356, 21396, 21436, 21476,
	21517, 21557, 21597, 21636, 21676, 21716, 21756, 21795, 21835, 21874, 21913, 21952,
	21991, 22030, 22069, 22108, 22147, 22185, 22224, 22262, 22300, 22338, 22376, 22414,
	22452, 22490, 22527, 22565, 22602, 22639, 22676, 22713, 22750, 22787, 22823, 22859,
	22896, 22932, 22968, 23004, 23040, 23075, 23111, 23146, 23181, 23216, 23251, 23286,
	23321, 23355, 23390, 23424, 23458, 23492, 23526, 23559, 23593, 23626, 23659, 23692,
	23725, 23758, 23790, 23823, 23855, 23887, 23919, 23951, 23983, 24014, 24045, 24077,
	24108, 24138, 24169, 24200, 24230, 24260, 24290, 24320, 24350, 24379, 24409, 24438,
	24467, 24496, 24525, 24553, 24582, 24610, 24638, 24666, 24694, 24721, 24748, 24776,
	24803, 24830, 24856, 24883, 24909, 24936, 24962, 24987, 25013, 25039, 25064, 25089,
	25114, 25139, 25164, 25188, 25213, 25237, 25261, 25285, 25308, 25332, 25355, 25378,
	25401, 25424, 25447, 25469, 25492, 25514, 25536, 25558, 25579, 25601, 25622, 25643,
	25664, 25685, 25706, 25726, 25746, 25766, 25786, 25806, 25826, 25845, 25865, 25884,
	25903, 25921, 25940, 25958, 25977, 25995, 26013, 26031, 26048, 26066, 26083, 26100,
	26117, 26134, 26151, 26167, 26184, 26200, 26216, 26232, 26247, 26263, 26278, 26294,
	26309, 26323, 26338, 26353, 26367, 26382, 26396, 26410, 26424, 26437, 26451, 26464,
	26477, 26490, 26503, 26516, 26529, 26541, 26553, 26566, 26578, 26589, 26601, 26613,
	26624, 26635, 26646, 26657, 26668, 26679, 26690, 26700, 26710, 26720, 26730, 26740,
	26750, 26759, 26769, 26778, 26787, 26796, 26805, 26814, 26823, 26831, 26839, 26848,
	26856, 26864, 26871, 26879, 26887, 26894, 26901, 26908, 26915, 26922, 26929, 26936,
	26942, 26949, 26955, 26961, 26967, 26973, 26979, 26984, 26990, 26995, 27001, 27006,
	27011, 27016, 27021, 27025, 27030, 27034, 27039, 27043, 27047, 27051, 27055, 27059,
	27062, 27066, 27069, 27073, 27076, 27079, 27082, 27085, 27088, 27091, 27093, 27096,
	27098, 27100, 27102, 27105, 27107, 27108, 27110, 27112, 27113, 27115, 27116, 27117,
	27119, 27120, 27121, 27122, 27122, 27123, 27124, 27124, 27125, 27125, 27125, 27125,
	27125, 27125, 27125, 27125, 27125, 27124, 27124, 27123, 27123, 27122, 27121, 27120,
	27119, 27118, 27117, 27116, 27115, 27113, 27112, 27110, 27109, 27107, 27105, 27103,
	27101, 27099, 27097, 27095, 27093, 27090, 27088, 27086, 27083, 27080, 27078, 27075,
	27072, 27069, 27066, 27063, 27060, 27057, 27054, 27051, 27047, 27044, 27040, 27037,
	27033, 27030, 27026, 27022, 27018 };

fCieCoords_t CCT2xy(int cct)
{
	fCieCoords_t ret = { 0.0, 0.0 };
	//cct in K
	if (cct >= 2000 && cct <= 10000)
	{
		unsigned short mired = (unsigned short)(1e6 / cct);
		ret = Mired2xy(mired);
	}
	return ret;
}

fCieCoords_t Mired2xy(unsigned short mired)
{
	//int tmp = 0;

	fCieCoords_t ret = { 0.0, 0.0 };
	if (mired >= 100 && mired <= 500)
	{
		//tmp = LutMiredToX[mired - 100];
		//tmp = LutMiredToY[mired - 100];
		ret.x = (float)(LutMiredToX[mired - 100]) / 65536.0f;
		ret.y = (float)(LutMiredToY[mired - 100]) / 65536.0f;
	}

	return ret;
}

int xy2uv1960(fCieCoords_t xy, fCieCoords_t* uv)
{
	float nen = (-2.0f * xy.x + 12.0f * xy.y + 3.0f);

	if (fabs(nen) > ACCURACY)
	{
		uv->x = 4.0f * xy.x / nen;
		uv->y = 6.0f * xy.y / nen;

		return 0;
	}

	return -1;
}

int uv19602xy(fCieCoords_t uv, fCieCoords_t* xy)
{
	float nen = (2.0f*uv.x - 8.0f*uv.y + 4.0f);

	if (fabs(nen) > ACCURACY)
	{
		xy->x = 3.0f * uv.x / nen;
		xy->y = 2.0f * uv.y / nen;

		return 0;
	}

	return -1;
}

//------------------------------------------------------------------------------------------------------------
//http://www.tandfonline.com/doi/pdf/10.1080/15502724.2014.839020
//------------------------------------------------------------------------------------------------------------

int CCTDuv2xy(int cct, float Duv, fCieCoords_t* xy)
{
	int ret;
	fCieCoords_t u0v0 = { 0.0f, 0.0f }; 	fCieCoords_t u1v1 = { 0.0f, 0.0f };
	fCieCoords_t x0y0 = { 0.0f, 0.0f }; 	fCieCoords_t x1y1 = { 0.0f, 0.0f };
	fCieCoords_t duv = { 0.0f, 0.0f };		fCieCoords_t uv = { 0.0f, 0.0f };
	unsigned short mired = (unsigned short)(1e6 / cct);
	xy->x = 0; xy->y = 0;
	
	//1. Calculate (u0,v0) of Planck at T(K)
	//x0y0 = CCT2xy(cct);
	x0y0 = Mired2xy(mired);
	ret=xy2uv1960(x0y0, &u0v0);
	if (ret < 0) return -1;


	//2. Calculate (u1,v1) of Planck at T+dT(K), dT=1K (shall be 0,01K!!!)
	//x1y1 = CCT2xy(cct+1);
	x1y1 = Mired2xy(mired-1);
	ret=xy2uv1960(x1y1, &u1v1);
	if (ret < 0) return -1;

	//3. Calculate
	duv.x = u0v0.x - u1v1.x;
	duv.y = u0v0.y - u1v1.y;

	float nen = sqrtf(duv.x * duv.x + duv.y * duv.y);
	if (fabs(nen) > ACCURACY)
	{
		uv.x = u0v0.x - Duv * duv.y / nen;
		uv.y = u0v0.y + Duv * duv.x / nen;

		uv19602xy(uv, xy);

		return 0;
	}

	return -1;
}